[1]ht
#include <iostream>
#include <list>
using namespace std;


class Hash{
    int bucket;
    list<int> *table;
public:
    Hash(int num);
    void insertItem(int val);
    void deleteItem(int key);
    int hashFunction(int x) {
      return (x % bucket);
    }

    void displayHash();
};

Hash::Hash(int num)
{
    this->bucket = num;
    table = new list<int>[bucket];
}

void Hash::insertItem(int key)
{
    int index = hashFunction(key);
    table[index].push_back(key);
}

void Hash::deleteItem(int key)
{
  int index = hashFunction(key);
  
  list <int> :: iterator i;
  for (i = table[index].begin();
           i != table[index].end(); i++) {
    if (*i == key)
      break;
  }
  
  if (i != table[index].end())
    table[index].erase(i);
}


void Hash::displayHash() {
  for (int i = 0; i < bucket; i++) {
    cout << i;
      for (auto x : table[i]){
          cout << " --> " << x;
      }
    cout << endl;
  }
}


int main(){
    
    int a[] = {15, 11, 27, 8, 12};
    int n = sizeof(a)/sizeof(a[0]);
    
    Hash h(7);
      
    for (int i = 0; i < n; i++){
        h.insertItem(a[i]);
    }

    h.displayHash();

    h.deleteItem(12);
    
    h.displayHash();
    
    return 0;
}



[2]hts
#include <iostream>
#include <list>
#include <string>
using namespace std;


class Hash{
    int bucket;
    list<string> *table;
public:
    Hash();
    void insertItem(string val);
    void deleteItem(string key);
    int hashFunction(string x) {
        if(x.length() > 0){
            char firstLetter = toupper(x[0]);
            return firstLetter - 'A';
        }else{
            return -1;
        }
    }

    void displayHash();
};

Hash::Hash()
{
    this->bucket = 26;
    table = new list<string>[bucket];
}

void Hash::insertItem(string key)
{
    int index = hashFunction(key);
    if (index != -1){
        table[index].push_back(key);
    }
}

void Hash::deleteItem(string key)
{
  int index = hashFunction(key);
  if (index != -1){
      list <string> :: iterator i;
       for (i = table[index].begin();
                i != table[index].end(); i++) {
         if (*i == key)
           break;
       }
       
       if (i != table[index].end())
         table[index].erase(i);
  }
}


void Hash::displayHash() {
  for (int i = 0; i < bucket; i++) {
    cout << i;
      for (auto x : table[i]){
          cout << " --> " << x;
      }
    cout << endl;
  }
}


int main(){
    
    Hash h;
    h.insertItem("apple");
    h.insertItem("bubble");
    h.insertItem("cat");
    h.insertItem("ant");

    h.displayHash();
    
    return 0;
}






[3]bs
#include <iostream>
using namespace std;
  
void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}
  
void bubbleSort(int arr[], int n)
{
    int i, j;
    for (i = 0; i < n-1; i++)
        for (j = 0; j < n-i-1; j++){
            if (arr[j] > arr[j+1]){
                swap(&arr[j], &arr[j+1]);
            }
        }
       
}
  
void printArray(int arr[], int size)
{
    int i;
    for (i = 0; i < size; i++){
        cout << arr[i] << " ";
    }
    cout << endl;
}
  
int main()
{
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr)/sizeof(arr[0]);
    bubbleSort(arr, n);
    cout<<"Sorted array: \n";
    printArray(arr, n);
    return 0;
}






[4]qs
#include <iostream>
using namespace std;
  
void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}

int partition (int arr[], int low, int high)
{
    int pivot = arr[high];
    int i = (low - 1);
  
    for (int j = low; j <= high - 1; j++)
    {
        if (arr[j] < pivot)
        {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        int pi = partition(arr, low, high);
  
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
  
void printArray(int arr[], int size)
{
    int i;
    for (i = 0; i < size; i++){
        cout << arr[i] << " ";
    }
    cout << endl;
}
  
int main()
{
    int arr[] = {10, 7, 8, 9, 1, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    quickSort(arr, 0, n - 1);
    cout << "Sorted array: \n";
    printArray(arr, n);
    return 0;
}







[5]ms
#include <iostream>
using namespace std;


void merge(int arr[], int l, int m, int r){
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
    int L[n1], R[n2];
  
    for (i = 0; i < n1; i++){
        L[i] = arr[l + i];
    }
    for (j = 0; j < n2; j++){
        R[j] = arr[m + 1 + j];
    }
    
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2){
        if (L[i] <= R[j]){
            arr[k] = L[i];
            i++;
        }else{
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1){
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2){
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r){
    if (l < r){
        int m = l+(r-l)/2;

        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
  
        merge(arr, l, m, r);
    }
}

void printArray(int A[], int size)
{
    int i;
    for (i=0; i < size; i++){
        cout << A[i] << " ";
    }
    cout << endl;
}
  
int main()
{
    int arr[] = {12, 11, 13, 5, 6, 7};
    int arr_size = sizeof(arr)/sizeof(arr[0]);
  
    printArray(arr, arr_size);
  
    mergeSort(arr, 0, arr_size - 1);
  
    printArray(arr, arr_size);
    return 0;
}